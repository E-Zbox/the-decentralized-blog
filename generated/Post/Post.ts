// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PostCreated extends ethereum.Event {
  get params(): PostCreated__Params {
    return new PostCreated__Params(this);
  }
}

export class PostCreated__Params {
  _event: PostCreated;

  constructor(event: PostCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get author(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class PostDeleted extends ethereum.Event {
  get params(): PostDeleted__Params {
    return new PostDeleted__Params(this);
  }
}

export class PostDeleted__Params {
  _event: PostDeleted;

  constructor(event: PostDeleted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PostEdited extends ethereum.Event {
  get params(): PostEdited__Params {
    return new PostEdited__Params(this);
  }
}

export class PostEdited__Params {
  _event: PostEdited;

  constructor(event: PostEdited) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[1].value.toString();
  }

  get title(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Post__getPostResult {
  value0: Address;
  value1: string;
  value2: string;

  constructor(value0: Address, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getAuthor(): Address {
    return this.value0;
  }

  getContent(): string {
    return this.value1;
  }

  getTitle(): string {
    return this.value2;
  }
}

export class Post extends ethereum.SmartContract {
  static bind(address: Address): Post {
    return new Post("Post", address);
  }

  getLatestPosts(count: BigInt): Array<BigInt> {
    let result = super.call(
      "getLatestPosts",
      "getLatestPosts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(count)]
    );

    return result[0].toBigIntArray();
  }

  try_getLatestPosts(count: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getLatestPosts",
      "getLatestPosts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(count)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPost(id: BigInt): Post__getPostResult {
    let result = super.call(
      "getPost",
      "getPost(uint256):(address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new Post__getPostResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString()
    );
  }

  try_getPost(id: BigInt): ethereum.CallResult<Post__getPostResult> {
    let result = super.tryCall(
      "getPost",
      "getPost(uint256):(address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Post__getPostResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString()
      )
    );
  }

  getUserPosts(userAddress: Address): Array<BigInt> {
    let result = super.call(
      "getUserPosts",
      "getUserPosts(address):(uint256[])",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserPosts(userAddress: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserPosts",
      "getUserPosts(address):(uint256[])",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class CreatePostCall extends ethereum.Call {
  get inputs(): CreatePostCall__Inputs {
    return new CreatePostCall__Inputs(this);
  }

  get outputs(): CreatePostCall__Outputs {
    return new CreatePostCall__Outputs(this);
  }
}

export class CreatePostCall__Inputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }

  get _content(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _title(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreatePostCall__Outputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }
}

export class DeletePostCall extends ethereum.Call {
  get inputs(): DeletePostCall__Inputs {
    return new DeletePostCall__Inputs(this);
  }

  get outputs(): DeletePostCall__Outputs {
    return new DeletePostCall__Outputs(this);
  }
}

export class DeletePostCall__Inputs {
  _call: DeletePostCall;

  constructor(call: DeletePostCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeletePostCall__Outputs {
  _call: DeletePostCall;

  constructor(call: DeletePostCall) {
    this._call = call;
  }
}

export class EditPostCall extends ethereum.Call {
  get inputs(): EditPostCall__Inputs {
    return new EditPostCall__Inputs(this);
  }

  get outputs(): EditPostCall__Outputs {
    return new EditPostCall__Outputs(this);
  }
}

export class EditPostCall__Inputs {
  _call: EditPostCall;

  constructor(call: EditPostCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _content(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _title(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class EditPostCall__Outputs {
  _call: EditPostCall;

  constructor(call: EditPostCall) {
    this._call = call;
  }
}
